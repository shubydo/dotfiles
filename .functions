# Decode JWT and print in readable format to console.
# Usage: jwtd <MY_JWT>
jwtd() {
	if [[ -x $(command -v jq) ]]; then
		jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<<"${1}"
		echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
	fi
}

# Get current IP and copy to clipboard (Mac specific)
myip() {
	curl -fSsL ifconfig.me | pbcopy
	echo "Current IP: $(pbpaste)"
}


asdf_set() {
	SCOPE="$1"
	TOOL="$2"
	VERSION="$3"
	# VERSION="${3-:latest}"

	printf "asdf_set: SCOPE=%s, TOOL=%s, VERSION=%s\n" "$SCOPE" "$TOOL" "$VERSION"
	
	# Check if SCOPE is "global" or "local"
	if [[ -z "$SCOPE" || ! "$SCOPE" =~ ^(global|local)$ ]]; then
		echo -e "[[ -z $SCOPE || ! $SCOPE =~ ^(global|local)$ ]]"
		echo "Invalid scope: $SCOPE (must be 'global' or 'local')"
		echo "Usage: $0 <SCOPE> <TOOL> <VERSION>"
		exit 0 
	fi

	if [[ -z "$TOOL" ]]; then
		echo "Invalid tool: $TOOL"
		echo "Usage: $0 <SCOPE> <TOOL> <VERSION>"
		exit 0
	fi

	if [[ -z "$VERSION" ]]; then
		echo "Invalid version: $VERSION"
		echo "Usage: $0 <SCOPE> <TOOL> <VERSION>"
		exit 0
	fi

	echo -e "${CYAN_BG_BOLD}Upgrading $SCOPE $TOOL to $VERSION${ENDCOLOR}"
	asdf install "$TOOL" "$VERSION"

	echo -e "${MAGENTA_BOLD}Setting $SCOPE $TOOL to $VERSION${ENDCOLOR}"
	asdf "$SCOPE" "$TOOL" "$VERSION"
	asdf reshim "$TOOL" "$VERSION"
}

# Upgrade all versions of tools managed via asdf: https://github.com/asdf-vm/asdf
asdf_upgrade() {
	TOOLS=($(asdf plugin list))
	echo -e "\033[4;33mCurrently installed tools: ${TOOLS[*]}\033[0m"
	for TOOL in "${TOOLS[@]}"; do
		echo -e "\033[4;33mUpgrading $TOOL\033[0m"
		asdf install "$TOOL" latest
		asdf global "$TOOL" latest
		asdf reshim "$TOOL" latest
	done

	echo -e "\033[4;33mAll tools upgraded!\033[0m"
}

# Upgrade all brew packages
brew_upgrade() {
	echo -e "\033[4;33mUpgrade all brew packages\033[0m"
	brew upgrade -v --greedy

	echo -e "\033[4;33mUinstall unused brew dependencies\033[0m"
	brew autoremove -v

	echo -e "\033[4;33mRemove outdated downloads and old versions of packages\033[0m"
	brew cleanup -v --prune=all

	echo -e "\033[4;33mDone!\033[0m"
}

# Upgrade brew packages and languages installed via asdf
upgrade() {
	CYAN="36"
	CYAN_BG="46"

	MAGENTA="35"
	MAGENTA_BG="45"

	CYAN_BOLD="\033[1;${CYAN}m"
	CYAN_BG_BOLD="\033[1;${CYAN_BG}m"

	MAGENTA_BOLD="\033[1;${MAGENTA}m"
	MAGENTA_BG_BOLD="\033[1;${MAGENTA_BG}m"

	ENDCOLOR="\033[0m"

	echo -e "${MAGENTA_BG_BOLD}Upgrade brew packages and languages installed via asdf${ENDCOLOR}"
	echo -e "${CYAN_BOLD}BREW${ENDCOLOR}"
	brew_upgrade

	echo -e "${CYAN_BOLD}ASDF${ENDCOLOR}"
	asdf_upgrade

	echo -e "${MAGENTA_BG_BOLD}Done!${ENDCOLOR}"
}

# KUBECONFIG
kfile() {
	echo Available kubeconfigs:
	files=($(find ~/.kube -type f -depth 1 | sort))

	count=0
	for file in ${files[@]}; do
		filename=${file##*/}
		echo "[${count}]: ${filename}"
		count=$((count + 1))
	done

	read choice
	if [[ $choice -le $(($count - 1)) ]] && [[ $choice -ge 0 ]]; then
		export KUBECONFIG=${files[@]:$choice:1}
		echo "KUBECONFIG set to ${KUBECONFIG}"
	else
		echo "Invalid selection!"
	fi
}

# AWS temp role assume
# shellcheck disable=SC2155
function aws-assume-role() {
	TMP_ROLE_ARN="$1"

	if [[ -z "$TMP_ROLE_ARN" ]]; then
		echo "Usage: $0 <role-arn>"
		return 7
	fi

	unset AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN

	TMP=$(aws sts assume-role \
		--role-arn "$TMP_ROLE_ARN" \
		--role-session-name "tmp")

	export AWS_ACCESS_KEY_ID=$(echo "$TMP" | jq -r '.Credentials.AccessKeyId')
	export AWS_SECRET_ACCESS_KEY=$(echo "$TMP" | jq -r '.Credentials.SecretAccessKey')
	export AWS_SESSION_TOKEN=$(echo "$TMP" | jq -r '.Credentials.SessionToken')

	aws sts get-caller-identity | jq
}

# Mac Specific
# Quickly toggles the function key settings on your Mac
function togglefn() {
	CURRENT_STATE=$(defaults read -g com.apple.keyboard.fnState)

	if [[ "$CURRENT_STATE" -eq 0 ]]; then
		defaults write -g com.apple.keyboard.fnState -bool true
	else
		defaults write -g com.apple.keyboard.fnState -bool false
	fi

	AFTER_STATE=$(defaults read -g com.apple.keyboard.fnState)

	echo "Function key setting toggled from $CURRENT_STATE to $AFTER_STATE"
}

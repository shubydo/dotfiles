# Decode JWT and print in readable format to console. 
# Usage: jwtd <MY_JWT>
jwtd() {
    if [[ -x $(command -v jq) ]]; then
         jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
         echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
    fi
}

# Get current IP and copy to clipboard (Mac specific)
myip() {
	curl -fSsL ifconfig.me | pbcopy
        echo "Current IP: $(pbpaste)"
}

# Upgrade all versions of tools managed via asdf: https://github.com/asdf-vm/asdf
asdfupgrade() {
	TOOLS=""
	TOOLS=($(asdf plugin list))
	echo -e "\033[4;33mCurrently installed tools: ${TOOLS[*]}\033[0m"
	for TOOL in "${TOOLS[@]}"; do
		echo -e "\033[4;33mUpgrading $TOOL\033[0m"
		asdf install "$TOOL" latest
		asdf global "$TOOL" latest	
		asdf reshim "$TOOL" latest	
	done
	
	echo "\033[4;33mAll tools upgraded!\033[0m"
}

update() {
	# Print in yellow blinking text
	echo -e "\033[4;33mUpgrade all brew packages\033[0m"
	brew upgrade -v --greedy
	
	echo -e "\033[4;33mUinstall unused brew dependencies\033[0m"
	brew autoremove -v
	
	echo -e "\033[4;33mRemove outdated downloads and old versions of packages\033[0m" 
	brew cleanup -v --prune=all
	
	echo -e "\033[4;33mDone!\033[0m"
}

# KUBECONFIG
kfile() {
    echo Available kubeconfigs:
    files=($(find ~/.kube -type f -depth 1 | sort))

    count=0
    for file in ${files[@]}; do
        filename=${file##*/}
        echo "[${count}]: ${filename}"
        count=$((count+1))
    done

    read choice
    if [[ $choice -le $(($count - 1)) ]] && [[ $choice -ge 0 ]]; then
        export KUBECONFIG=${files[@]:$choice:1}
        echo "KUBECONFIG set to ${KUBECONFIG}"
    else
        echo "Invalid selection!"
    fi
}

# AWS temp role assume
function aws-assume-role(){
	TMP_ROLE_ARN=$1

	if [ -z "$TMP_ROLE_ARN" ]; then
		echo "Usage: $0 <role-arn>"
		exit 1
	fi

	unset AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN 

	TMP=$(aws sts assume-role \
			--role-arn "$TMP_ROLE_ARN" \
			--role-session-name "tmp")


	export AWS_ACCESS_KEY_ID=$(echo "$TMP" | jq -r '.Credentials.AccessKeyId')
	export AWS_SECRET_ACCESS_KEY=$(echo "$TMP" | jq -r '.Credentials.SecretAccessKey')
	export AWS_SESSION_TOKEN=$(echo "$TMP" | jq  -r '.Credentials.SessionToken')

	aws sts get-caller-identity | jq
} 
